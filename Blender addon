bl_info = {
    "name": "NR_Cleanup",
    "author": "Bigthirsty & Skyrow",
    "version": (0, 0, 3),
    "blender": (4, 0, 1),
    "location": "3D Viewport > Sidebar > NR Cleanup",
    "description": "Cleans up NinjaRipped trackmania2020 maps to driving surfaces only",
    "category": "Trackmania",
}

import bpy
from bpy.types import Operator, Panel




# 01. Select Map Collection

class SelectCollectionOperator(Operator):
    bl_idname = "object.select_collection"
    bl_label = "Select Collection"

    collection_name: bpy.props.StringProperty(
        name="Collection Name",
        description="Name of the collection to select",
        default=""
    )

    def execute(self, context):
        collection_name = self.collection_name

        # Check if the collection exists
        if collection_name in bpy.data.collections:
            # Clear existing selection
            bpy.ops.object.select_all(action='DESELECT')

            # Set the collection as the active collection
            context.view_layer.active_layer_collection = bpy.context.view_layer.layer_collection.children[collection_name]

            # Make one object from the collection active
            active_object = bpy.data.collections[collection_name].all_objects[0]
            context.view_layer.objects.active = active_object

            # Select all objects in the collection
            for obj in bpy.data.collections[collection_name].all_objects:
                obj.select_set(True)

            # Join selected objects
            bpy.ops.object.join()

            # Remove all other collections
            for collection in bpy.data.collections:
                if collection.name != collection_name:
                    bpy.data.collections.remove(collection)
                    
            # Mirror map on Z Global
            bpy.ops.transform.mirror(orient_type='GLOBAL', orient_matrix=((1, 0, 0), (0, 1, 0), (0, 0, 1)), orient_matrix_type='GLOBAL', constraint_axis=(False, False, True))

            # Clean up Mat doubles
            bpy.ops.object.select_all(action='SELECT')
            bpy.data.orphans_purge(do_recursive=True)

            # Separate by material
            bpy.ops.mesh.separate(type='MATERIAL')

            self.report({'INFO'}, f"Joined objects in collection: {collection_name}. Other collections removed.")
        else:
            self.report({'ERROR'}, f"Collection not found: {collection_name}")
        
        return {'FINISHED'}

    def invoke(self, context, event):
        return context.window_manager.invoke_props_dialog(self)
    
    
    
    
# 02. Create Route Collection

class OBJECT_OT_PutInCleanedRouteCollection(Operator):
    bl_idname = "object.put_in_cleaned_route_collection"
    bl_label = "Put in Cleaned Route Collection"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        cleaned_route_collection = bpy.data.collections.get("Cleaned Route")
        if not cleaned_route_collection:
            cleaned_route_collection = bpy.data.collections.new("Cleaned Route")
            bpy.context.scene.collection.children.link(cleaned_route_collection)

        selected_objects = bpy.context.selected_objects
        for obj in selected_objects:
            cleaned_route_collection.objects.link(obj)

        bpy.ops.object.select_all(action='DESELECT')

        return {'FINISHED'}

    def invoke(self, context, event):
        return context.window_manager.invoke_props_dialog(self)




# 03. Delete Vertical Faces

from math import (
    pow,
    sqrt,
)

def cross(a, b):
    """return a x b"""
    c = [a[1]*b[2] - a[2]*b[1],
         a[2]*b[0] - a[0]*b[2],
         a[0]*b[1] - a[1]*b[0]]
    return c

def length(vect):
    return sqrt(pow(vect[0],2) + pow(vect[1],2) + pow(vect[2],2))

class MESH_OT_delete_vertical_faces(bpy.types.Operator):
    bl_idname = 'mesh.delete_vertical_faces'
    bl_label = 'Delete vertical faces'
    bl_options = {'REGISTER', 'UNDO'}
    
    apply_rotation: bpy.props.BoolProperty(name='Apply rotation', default=False)
    
    @classmethod
    def poll(cls, context):
        return context.object.type == 'MESH'
    
    def invoke(self, context, event):
        return context.window_manager.invoke_props_dialog(self, width=300)
    
    def execute(self, context):                
        up_vector = [0., 0., 1.]
        null_vector = [0., 0., 0.]
        
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.select_mode(use_extend=False, use_expand=False, type='FACE')
        bpy.ops.object.mode_set(mode='OBJECT')
        
        # Apply rotation if requested
        if self.apply_rotation:
            bpy.ops.object.transform_apply(location=False, rotation=True, scale=False) 
               
        # Mesh faces
        faces = [f for f in context.object.data.polygons]
        
        # Selecting vertical faces
        for f in faces:
            normal_x_up = cross(f.normal, up_vector)
            # If the norm of cross profuct is 1., then the face is vertical    
            if (length(normal_x_up) == 1.):
                f.select = True
            else:
                f.select = False
                
        # Deleting selected faces
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.delete(type='FACE')
        bpy.ops.object.mode_set(mode='OBJECT')
        return {'FINISHED'}
    
    def draw(self, context):
        layout = self.layout
        layout.label(text='It will delete vertical face in the local space.', icon='INFO')
        layout.label(text='If your object has a transformation of its rotation,')
        layout.label(text='You may want to apply it first')
        layout.prop(self, 'apply_rotation')


class VIEW3D_PT_my_custom_panel(bpy.types.Panel):
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = "NR Cleanup"
    bl_label = "Ninja Ripped Map Cleanup"

    def draw(self, context):
        layout = self.layout
        row = layout.row()
        row.operator("object.select_collection", text="01. Select Map Collection")
        row = layout.row()
        row.operator("object.put_in_cleaned_route_collection", text="02. Create Route Collection")
        row = layout.row()
        row.operator("mesh.delete_vertical_faces", text="03. Delete Vertical Faces")

def register():
    bpy.utils.register_class(VIEW3D_PT_my_custom_panel)
    bpy.utils.register_class(SelectCollectionOperator)
    bpy.utils.register_class(OBJECT_OT_PutInCleanedRouteCollection)
    bpy.utils.register_class(MESH_OT_delete_vertical_faces)

def unregister():
    bpy.utils.unregister_class(VIEW3D_PT_my_custom_panel)
    bpy.utils.unregister_class(SelectCollectionOperator)
    bpy.utils.unregister_class(OBJECT_OT_PutInCleanedRouteCollection)
    bpy.utils.unregister_class(MESH_OT_delete_vertical_faces)

if __name__ == "__main__":
    register()
